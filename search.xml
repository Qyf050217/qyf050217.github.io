<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线段树模板三</title>
      <link href="/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%B8%89/"/>
      <url>/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%B8%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树模板二</title>
      <link href="/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%BA%8C/"/>
      <url>/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="本文的目标-AC真正的线段树模板一"><a href="#本文的目标-AC真正的线段树模板一" class="headerlink" title="本文的目标 -AC真正的线段树模板一"></a>本文的目标 -AC真正的线段树模板一</h2><p>题目链接：</p><ul><li>牛客：<a href="https://ac.nowcoder.com/acm/problem/226536">https://ac.nowcoder.com/acm/problem/226536</a></li><li>洛谷：<a href="https://www.luogu.com.cn/problem/P3372">https://www.luogu.com.cn/problem/P3372</a></li></ul><p>太好了，AC 一道题可以让自己的总题量<code>+=2</code></p><p>一定有人和我一样，刚学完单点修改用循环<code>change()</code>交了一发区间修改惨遭 TLE<br>仔细算一下复杂度甚至超过了暴力加</p><p>这时候就要引入<code>lazy</code>标记，这是单点修改不需要的</p><hr><h2 id="lazy-标记是什么"><a href="#lazy-标记是什么" class="headerlink" title="lazy 标记是什么"></a>lazy 标记是什么</h2>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树模板一</title>
      <link href="/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%B8%80/"/>
      <url>/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>线段树更像是一种工具，用来维护区间各种信息</p></blockquote><h2 id="本文的目标"><a href="#本文的目标" class="headerlink" title="本文的目标"></a>本文的目标</h2><p>前缀和例题：<a href="https://ac.nowcoder.com/acm/problem/226282">https://ac.nowcoder.com/acm/problem/226282</a><br>线段树一：<a href="https://ac.nowcoder.com/acm/problem/226533">https://ac.nowcoder.com/acm/problem/226533</a></p><p>题一是一个很单纯的区间查询，我们可以用<code>res = sum[r] - sum[l - 1]</code>得到答案<br>题二相较题一，只多了一个修改的操作<br>可若仍使用前缀和思想来写，则需要对每次修改都更新一边前缀和，时间复杂度达到了<code>O(n^2)</code><br>这时就要引入 <strong>线段树</strong> 这一数据结构</p><hr><h2 id="线段树的概念"><a href="#线段树的概念" class="headerlink" title="线段树的概念"></a>线段树的概念</h2><p>顾名思义，线段树是一棵由线段组成的二叉树<br>不同于数据结构课上讲的二叉树，线段树采用了数组来存储数据<br>但是物理空间上的相对位置只提供了指针的计算方法<br>所以我个人是选择遗忘它数组的身份</p><hr><h2 id="线段树的代码实现"><a href="#线段树的代码实现" class="headerlink" title="线段树的代码实现"></a>线段树的代码实现</h2><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p><code>p</code>结点的左子树的指针是<code>2 * p</code> ，代表的区间范围是<code>[l, mid]</code><br><code>p</code>结点的右子树的指针是<code>2 * p + 1</code> ，代表的区间范围是<code>[mid + 1, r]</code></p><p>当且仅当<code>l == r</code>时，<code>p</code>结点为叶子结点（区间范围为 1），此时<code>sum</code>的值等于下标为<code>l</code>的元素的值<br>非叶子结点的值就等于左子树与右子树的sum之和，<code>tree[p] = tree[2*p] + tree[2*p+1]</code><br>根据这些写出建树的递归函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] = arr[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r);</span><br><span class="line"></span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改值"><a href="#改值" class="headerlink" title="改值"></a>改值</h3><p>具体操作分为三步</p><ol><li>找到需要修改的叶子结点</li><li>更改叶子结点</li><li>更新包含这个下标的所有线段</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r &amp;&amp; r==pos) &#123;</span><br><span class="line">        tree[p] += num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找目标结点</span></span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) &#123; <span class="comment">// 目标下标在左子树对应的区间里</span></span><br><span class="line">        <span class="built_in">change</span>(<span class="number">2</span>*p, l, mid, pos, num);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 目标下标在右子树对应的区间里</span></span><br><span class="line">        <span class="built_in">change</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, pos, num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新包含此下标的线段的 sum</span></span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>接下来就是查询<code>[x, y]</code>的区间和了<br>也很简单，首先要明晰一个概念，线段树中任意两个结点只有包含和毫不相关这两种关系<br>是不会存在重叠这种情况的</p><p>那么我只需将所有 <strong>完全包含于</strong><code>[x, y]</code>的区间的值相加即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l &amp;&amp; r&lt;=y) &#123; <span class="comment">// 结点对应的区间被 [x, y] 包含</span></span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123; <span class="comment">// 目标区间有部分在左子树里</span></span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p, l, mid, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重中之重不能写 else if ，目标区间横跨左右子树是存在的</span></span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>) &#123;</span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"><span class="type">int</span> n,m; <span class="comment">// n个结点，m次查询</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">1e5</span><span class="number">+1</span>)</span></span>; <span class="comment">// 存初始数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tree</span><span class="params">(<span class="number">4</span>*<span class="number">1e5</span><span class="number">+1</span>)</span></span>; <span class="comment">// 线段树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;<span class="comment">// 建树</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] = arr[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r);</span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> num)</span></span>&#123;<span class="comment">// 把 pos 的值改为 num</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] += num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">change</span> (<span class="number">2</span>*p, l, mid, pos, num);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, pos, num);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;<span class="comment">// 计算 [x, y] 的区间和</span></span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l &amp;&amp; r&lt;=y) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p, l, mid, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>)&#123;</span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> op;cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> pos,num;cin &gt;&gt; pos &gt;&gt; num;</span><br><span class="line">            <span class="built_in">change</span> (<span class="number">1</span>, <span class="number">1</span>, n, pos,num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> left,right;cin &gt;&gt; left &gt;&gt; right;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">calc</span> (<span class="number">1</span>, <span class="number">1</span>, n, left, right) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="线段树的进阶"><a href="#线段树的进阶" class="headerlink" title="线段树的进阶"></a>线段树的进阶</h2><p>可以注意到线段树函数的参数都有<code>(int p, int l, int r)</code>这个参数列表<br>很自然想到可以用结构体来维护，这个煮包没实现<br>但是我已经在着手学习cpp的面向对象，打算把线段树封装成class方便快速AC板子题，希望在写完这个专题前能学完</p><blockquote><p>本文实现了单点修改，区间查找的线段树模板<br>最后请耐心看到这里的同学思考一下如何实现区间修改</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客语法</title>
      <link href="/2025/02/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/02/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>测试测试测试测试测试测试测试测试测试测试<br>测试测试测试测试测试测试测试测试测试测试<br>测试测试测试测试测试测试测试测试测试测（59字）<br>简介写59字</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><hr><h2 id="分割线上方的也是标题2"><a href="#分割线上方的也是标题2" class="headerlink" title="分割线上方的也是标题2"></a>分割线上方的也是标题2</h2><p>正文</p><blockquote><p>这是一段引用</p></blockquote><br><p>把大象放进冰箱:</p><ol><li>打开冰箱</li><li>把大象装进冰箱</li><li>关上冰箱</li></ol><p>无序列表：</p><ul><li>张三</li><li>李四</li><li>王五</li></ul><p>目标：</p><ul><li><input checked="" disabled="" type="checkbox"> 活着</li><li><input disabled="" type="checkbox"> cf rating 2100</li><li><input disabled="" type="checkbox"> icpc 区域赛金牌</li><li><input disabled="" type="checkbox"> worldfinal</li></ul><p>代码块：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>斜体</em> <strong>加粗</strong> <code>cout &lt;&lt; endl</code> <u>下划线</u> <del>删除线</del></p><p>数学公式：<br>$$<br>\frac{\partial f}{\partial x} &#x3D; 2\sqrt{a}x<br>$$</p><p>表格: </p><table><thead><tr><th align="left">姓名</th><th align="right">年龄</th><th align="center">成绩</th></tr></thead><tbody><tr><td align="left">张三</td><td align="right">19</td><td align="center">99</td></tr><tr><td align="left">李四</td><td align="right">20</td><td align="center">100</td></tr></tbody></table><p>超链接: <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a><br>引用超链接：<a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a> <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a> <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a> <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a><br>URL: <a href="http://www.baidu.com/">http://www.baidu.com</a></p><p>图片的引用<br><img src="https://wallpaperm.cmcm.com/0feb1a932efcb5aa8c20423e777c277d.jpg" alt="ll"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Codeforces </tag>
            
            <tag> AtCoder </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> PTA </tag>
            
            <tag> HDU </tag>
            
            <tag> POJ </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 排序 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
