<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客语法</title>
    <url>/2025/02/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>测试测试测试测试测试测试测试测试测试测试<br>测试测试测试测试测试测试测试测试测试测试<br>测试测试测试测试测试测试测试测试测试测（59字）<br>简介写59字</p>
<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><hr>
<h2 id="分割线上方的也是标题2"><a href="#分割线上方的也是标题2" class="headerlink" title="分割线上方的也是标题2"></a>分割线上方的也是标题2</h2><p>正文</p>
<blockquote>
<p>这是一段引用</p>
</blockquote>
<br>

<p>把大象放进冰箱:</p>
<ol>
<li>打开冰箱</li>
<li>把大象装进冰箱</li>
<li>关上冰箱</li>
</ol>
<p>无序列表：</p>
<ul>
<li>张三</li>
<li>李四</li>
<li>王五</li>
</ul>
<p>目标：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 活着</li>
<li><input disabled="" type="checkbox"> cf rating 2100</li>
<li><input disabled="" type="checkbox"> icpc 区域赛金牌</li>
<li><input disabled="" type="checkbox"> worldfinal</li>
</ul>
<p>代码块：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>斜体</em> <strong>加粗</strong> <code>cout &lt;&lt; endl</code> <u>下划线</u> <del>删除线</del></p>
<p>数学公式：<br>$$<br>\frac{\partial f}{\partial x} &#x3D; 2\sqrt{a}x<br>$$</p>
<p>表格: </p>
<table>
<thead>
<tr>
<th align="left">姓名</th>
<th align="right">年龄</th>
<th align="center">成绩</th>
</tr>
</thead>
<tbody><tr>
<td align="left">张三</td>
<td align="right">19</td>
<td align="center">99</td>
</tr>
<tr>
<td align="left">李四</td>
<td align="right">20</td>
<td align="center">100</td>
</tr>
</tbody></table>
<p>超链接: <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a><br>引用超链接：<a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a> <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a> <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a> <a href="http://www.baidu.com/" title="鼠标放上去会看见">百度</a><br>URL: <a href="http://www.baidu.com/">http://www.baidu.com</a></p>
<p>图片的引用<br><img src="https://wallpaperm.cmcm.com/0feb1a932efcb5aa8c20423e777c277d.jpg" alt="ll"></p>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>Codeforces</tag>
        <tag>AtCoder</tag>
        <tag>牛客</tag>
        <tag>洛谷</tag>
        <tag>PTA</tag>
        <tag>HDU</tag>
        <tag>POJ</tag>
        <tag>搜索</tag>
        <tag>并查集</tag>
        <tag>排序</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集和最小生成树</title>
    <url>/2025/03/04/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<blockquote>
<p>学校算法优化的第一堂课，课后作业都是比较典的板子题<br>由于是限时作业，所有记录下题目详情，防止以后忘记了</p>
</blockquote>
<h2 id="并查集板子"><a href="#并查集板子" class="headerlink" title="并查集板子"></a>并查集板子</h2><p>计算 <strong>无向图</strong> 中连通分量的个数和成员<br>哈希表（结点 - 父亲结点）<br>能追溯到相同祖先的成员同属一个集合<br>可以使用路径压缩，使得哈希表的键值对变成（结点 - 父亲结点&#x2F;祖先结点）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fa[maxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> op;cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">            <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v)) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最小生成树板子"><a href="#最小生成树板子" class="headerlink" title="最小生成树板子"></a>最小生成树板子</h2><p>用于在无向图中，找到 <strong>权值最小</strong> 的树<br>只会克鲁斯卡尔算法，也就是常说的加边法<br>我觉得这个就够用了，也没花时间学加点法</p>
<p>说白了这算法就是两步</p>
<ol>
<li>把边的权值从小到大排序遍历</li>
<li>如果当前边的两个端点分属两个集合中，这个边就得要</li>
</ol>
<p>注意点：</p>
<ul>
<li>最小生成树也是树，边数和结点数一定满足<code>countPath == n-1</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fa[maxN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">path</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> path&amp; a, <span class="type">const</span> path&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.weight &lt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="function">vector&lt;path&gt; <span class="title">arr</span><span class="params">(m)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i].u &gt;&gt; arr[i].v &gt;&gt; arr[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    ranges::<span class="built_in">sort</span>(arr, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> countPath = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : arr) &#123;</span><br><span class="line">        <span class="type">int</span> u = i.u;</span><br><span class="line">        <span class="type">int</span> v = i.v;</span><br><span class="line">        <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">        <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (u_fa != v_fa) &#123;</span><br><span class="line">            countPath++;</span><br><span class="line">            res += i.weight;</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (countPath &lt; n<span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;No MST&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="一-冰岛家谱"><a href="#一-冰岛家谱" class="headerlink" title="一 冰岛家谱"></a>一 冰岛家谱</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>冰岛是作为一个人口稀少的国家，人群之间具有复杂的血缘关系，为了避免不必要的意外，他们的手机上都安装了一款可以随时查询两个人之间是否有血缘关系的软件。现在你的任务就是实现这样一个功能，接收血缘关系的登记信息，并在我们查询时给出两个人是否具有血缘关系。<br>血缘关系具有 <strong>自反性</strong>、<strong>传递性</strong>。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行整数n，以下n行，每行3个正整数q、a、b</p>
<p>若<code>q == 1</code>，则登记a与b具有血缘关系</p>
<p>若<code>q == 2</code>，则查询a与b的血缘关系，若有，输出一行<code>YES</code>；若无，输出一行<code>NO</code>。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每个<code>q == 2</code>，输出一行<code>YES</code>或<code>NO</code>。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>纯正的板子题，没一点变通</p>
<h3 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">10000007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> op;cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v</span><br><span class="line">            <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">            <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v)) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二-冗余链接"><a href="#二-冗余链接" class="headerlink" title="二 冗余链接"></a>二 冗余链接</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>树可以看成是一个连通且 <strong>无环</strong> 的 <strong>无向</strong> 图。</p>
<p>给定往一棵 n 个节点 (节点值 1～n) 的树中添加一条边后的图。添加的边的两个顶点包含在 1 到 n 中间，且这条附加的边不属于树中已存在的边。</p>
<p>请找出一条可以删去的边，删除后可使得剩余部分是一个有着 n 个节点的树。如果有多个答案，则找到最后出现的边编号。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行输入正整数n（n&lt;&#x3D;100）表示树节点的数量<br>随后n行，每行给出两个节点编号，表示该两点相连</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出可以删除的边的编号（按输入顺序，第i行给定的边编号为i），该边删除后可使得剩余部分是一个有着 n 个节点的树。如果有多个答案，则输出最后的边编号</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目的要求是把给出的图删掉一条边后是一棵树<br>因为题目<code>n &lt;= 100</code>所以直接暴力计算删除一条边后剩下的结点能不能组成一棵树<br>由于题目给出了<code>n</code>条边，所以删除一条边后剩下<code>n-1</code>条边<br>边的数量为<code>n-1</code>，所有结点在一个连通分量里 &lt;&#x3D;&gt; 该图是一棵树</p>
<p>注意：</p>
<ul>
<li>如果有多个答案，则找到最后出现的边编号。我们从后往前删除边，第一个符合条件的就是答案</li>
</ul>
<h3 id="AC-代码-1"><a href="#AC-代码-1" class="headerlink" title="AC 代码"></a>AC 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">107</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123; <span class="comment">// 验证图中连通分量个数是否为 1 ，也可以逐个比较祖先节点是否相同，可以省一些时间</span></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        st.<span class="built_in">insert</span>(<span class="built_in">find</span>(fa[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> st.<span class="built_in">size</span>() == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[i] = &#123;u, v&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 从后往前选择删除的边</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++) fa[k] = k; <span class="comment">// 将 fa 数组初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>; <span class="comment">// 删除第 i 条边，可以理解为跳过该边</span></span><br><span class="line">            <span class="type">int</span> u = adj[j].first;</span><br><span class="line">            <span class="type">int</span> v = adj[j].second;</span><br><span class="line">            <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">            <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(n)) &#123;</span><br><span class="line">            cout &lt;&lt; i<span class="number">+1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三-文件传输"><a href="#三-文件传输" class="headerlink" title="三 文件传输"></a>三 文件传输</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>当两台计算机双向连通的时候，文件是可以在两台机器间传输的。给定一套计算机网络，请你判断任意两台指定的计算机之间能否传输文件？</p>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>首先在第一行给出网络中计算机的总数 n (2≤n≤10^4)，于是我们假设这些计算机从 1 到 n 编号。<br>随后每行输入按以下格式给出：</p>
<ul>
<li><code>I c1 c2</code> : 其中<code>I</code>表示在计算机<code>c1</code>和<code>c2</code>之间加入连线，使它们连通；</li>
<li><code>C c1 c2</code> : 其中<code>C</code>表示查询计算机<code>c1</code>和<code>c2</code>之间能否传输文件；</li>
<li><code>S</code> : 这里<code>S</code>表示输入终止。</li>
</ul>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><ul>
<li><code>C</code> : 如果<code>c1</code>和<code>c2</code>之间可以传输文件，就在一行中输出<code>yes</code>，否则输出<code>no</code>。</li>
<li><code>S</code> : 如果网络中所有计算机之间都能传输文件,在一行中输出<code>The network is connected.</code>；</li>
<li><code>S</code> : 或者输出<code>There are k components.</code>，其中k是网络中连通集的个数。</li>
</ul>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>c1</code>和<code>c2</code>在同一连通分量中就能传输文件<br>所以面对<code>C</code>查询 <code>cout &lt;&lt; (find(c1) == find(c2) ? &quot;yes&quot; : &quot;no&quot;) &lt;&lt; endl;</code> </p>
<p><code>S</code>终止程序后要判断图中有几个 <strong>联通分量</strong>，如果等于1则都能传输文件，否则输出联通集合的个数</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">10007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> fa[x];</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;= n; i++) fa[i] = i; <span class="comment">// 初始化 fa 数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt; st; <span class="comment">// 存联通集合的祖先结点，有几个祖先节点说明有几个联通集合</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">                <span class="type">int</span> k = <span class="built_in">find</span>(fa[i]);</span><br><span class="line">                st.<span class="built_in">insert</span>(k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;The network is connected.&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;There are %d components.&quot;</span>,st.<span class="built_in">size</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;I&#x27;</span>) &#123; <span class="comment">// 联通 u v 所在的集合</span></span><br><span class="line">            <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">            <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 查询 u v 是否在同一集合中</span></span><br><span class="line">            <span class="type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v)) &#123; <span class="comment">// 祖先结点相同 &lt;=&gt; 同属一个联通分量</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四-社交集群"><a href="#四-社交集群" class="headerlink" title="四 社交集群"></a>四 社交集群</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>当你在社交网络平台注册时，一般总是被要求填写你的个人兴趣爱好，以便找到具有相同兴趣爱好的潜在的朋友。<br>一个 <strong>社交集群</strong> 是指部分兴趣爱好相同的人的集合。你需要找出所有的社交集群。</p>
<h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行给出人数<code>N</code>（N &lt;&#x3D; 1000），编号为 [1, N]<br>随后n行给出以下格式<code>爱好数量 ：爱好1 ... 爱好k</code></p>
<h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>第一行：给出社交集群个数<br>第二行：非递增给出各集群人数</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>将输入转化为 爱好 - 人<br>同一爱好的人将他们所在集合合并</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long <span class="comment">// 题目会爆 int 没注意</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">1007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i; <span class="comment">// 初始化 fa 数组 </span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;&gt; mp; <span class="comment">// 爱好 - 有此爱好的人</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读入 mp </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> k;cin &gt;&gt; k;</span><br><span class="line">        <span class="type">char</span> c;cin &gt;&gt; c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">            <span class="type">int</span> h;cin &gt;&gt; h;</span><br><span class="line">            mp[h].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将每个爱好的父亲结点都标记为第 1 个人的祖先结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : mp) &#123;</span><br><span class="line">        <span class="type">int</span> all_fa = <span class="built_in">find</span>(i.second[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i.second.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            fa[<span class="built_in">find</span>(fa[i.second[j]])] = all_fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算各社交集群的人数</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res; <span class="comment">// 集群 - 集群人数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        res[<span class="built_in">find</span>(fa[i])]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将集群人数排序输出</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : res) &#123;</span><br><span class="line">        arr.<span class="built_in">push_back</span>(i.second);</span><br><span class="line">    &#125;</span><br><span class="line">    ranges::<span class="built_in">sort</span>(arr,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; arr.<span class="built_in">size</span>() &lt;&lt; endl; <span class="comment">// 集群数量，等价于 res.size();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要求末尾没有空格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i];</span><br><span class="line">        <span class="keyword">if</span> (i != arr.<span class="built_in">size</span>()<span class="number">-1</span>) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五-通工程之最低成本建设问题"><a href="#五-通工程之最低成本建设问题" class="headerlink" title="五 通工程之最低成本建设问题"></a>五 通工程之最低成本建设问题</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。<br>现得到城镇道路统计表，表中列出了有可能建设成快速路的若干条道路的成本，求畅通工程需要的最低成本。</p>
<h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行给出城镇数目N (1&lt;N≤1000)和候选道路数目M≤3N；<br>随后的M行，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号（从1编号到N）以及该道路改建的预算成本。</p>
<h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出畅通工程需要的最低成本。<br>如果输入数据不足以保证畅通，则输出“Impossible”。</p>
<h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>最小生成树的板子题<br>题目的意思就是让我们在图里选择权值和最小的边，使得所有结点变成一棵树<br>前面也提到过：<strong>边数为<code>n-1</code> + 所有结点在一个连通分量里 &lt;&#x3D;&gt; 该图为一棵树</strong><br>所以我们按花费升序排列所有道路，选择边时确保两个端点分属不同集合中</p>
<p>最后选择的边为<code>n-1</code>则代表能构建出一颗生成树<br>值得注意的是，如果给你的是一个联通图，那一定能构造出生成树，反之则反</p>
<h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">1007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">path</span> &#123; <span class="comment">// 将边的信息存为一个对象</span></span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> path&amp; a, <span class="type">const</span> path&amp; b)</span> </span>&#123; <span class="comment">// 用于排序</span></span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;path&gt; <span class="title">arr</span><span class="params">(q)</span></span>;<span class="comment">// 储存所有边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i].u &gt;&gt; arr[i].v &gt;&gt; arr[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按花费升序所有边</span></span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>; <span class="comment">// 花费 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u = arr[i].u;</span><br><span class="line">        <span class="type">int</span> v = arr[i].v;</span><br><span class="line">        <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">        <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">if</span> (u_fa != v_fa) &#123; <span class="comment">// 如果这两个端点分属两个集合，那就加上这条边</span></span><br><span class="line">            res += arr[i].cost;</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证结果是否为联通集合，方法很多，这里采用的是验证后面结点的祖先结点是否相同</span></span><br><span class="line">    <span class="type">int</span> all_fa = <span class="built_in">find</span>(fa[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (all_fa != <span class="built_in">find</span>(fa[i])) &#123; <span class="comment">// 不相同说明 i 结点属于另一集合</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六-畅通工程之局部最小花费问题"><a href="#六-畅通工程之局部最小花费问题" class="headerlink" title="六  畅通工程之局部最小花费问题"></a>六  畅通工程之局部最小花费问题</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。<br>现得到城镇道路统计表，表中列出了任意两城镇间修建快速路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全地区畅通需要的最低成本。</p>
<h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行给出村庄数目N (1≤N≤100)；<br>随后的N(N−1)&#x2F;2行对应村庄间道路的成本及修建状态：每行给出4个正整数，分别是两个村庄的编号（从1编号到N），此两村庄间道路的成本，以及修建状态 — 1表示已建，0表示未建。<br><code>u v cost flag</code></p>
<h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出全省畅通需要的最低成本。</p>
<h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先题目已经保证能找到最小生成树，无需我们判断<br>和上一题不同的是，已经有路被修好了，有的路还没<br>对于<code>flag == 0</code> 把该边加到arr数组里<br>对于<code>flag == 1</code> 把并查集初始化</p>
<h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"><span class="type">int</span> fa[<span class="number">107</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">path</span>&#123; <span class="comment">// 将边的信息存为一个结构体</span></span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 找到该结点的祖先结点</span></span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> path&amp; a, <span class="type">const</span> path&amp; b)</span> </span>&#123; <span class="comment">// 用于按权值升序排序边</span></span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i; <span class="comment">// 初始化并查集</span></span><br><span class="line">    vector&lt;path&gt; arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n*(n<span class="number">-1</span>)/<span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u,v,cost,flag;cin &gt;&gt; u &gt;&gt; v &gt;&gt; cost &gt;&gt; flag;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; <span class="comment">// 这条路已经建造完成</span></span><br><span class="line">            <span class="type">int</span> u_fa = <span class="built_in">find</span>(u);</span><br><span class="line">            <span class="type">int</span> v_fa = <span class="built_in">find</span>(v);</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 未完成，加到 arr 数组里</span></span><br><span class="line">            path p;</span><br><span class="line">            p.u = u;</span><br><span class="line">            p.v = v;</span><br><span class="line">            p.cost = cost;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 升序排序边</span></span><br><span class="line">    ranges::<span class="built_in">sort</span>(arr,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>; <span class="comment">// 最小花费</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i.u) == <span class="built_in">find</span>(i.v)) <span class="keyword">continue</span>; <span class="comment">// 如果这两个集合已经联通，那这条边加入就会形成环</span></span><br><span class="line">        res += i.cost;</span><br><span class="line">        <span class="type">int</span> u_fa = <span class="built_in">find</span>(i.u);</span><br><span class="line">        <span class="type">int</span> v_fa = <span class="built_in">find</span>(i.v);</span><br><span class="line">        fa[u_fa] = v_fa;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七-最小生成树的唯一性"><a href="#七-最小生成树的唯一性" class="headerlink" title="七 最小生成树的唯一性"></a>七 最小生成树的唯一性</h2><p>说实话想了有一会，但是我的方法复杂度很高，不知道是不是最优解</p>
<h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个带权无向图，如果是连通图，则至少存在一棵最小生成树，有时最小生成树并不唯一。<br>本题就要求你计算最小生成树的总权重，并且判断其是否唯一。</p>
<h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p>首先第一行给出两个整数：无向图中顶点数 N（≤500）和边数 M。<br>随后 M 行，每行给出一条边的两个端点和权重，格式为<code>顶点1 顶点2 权重</code>，其中顶点从 1 到 N 编号，权重为正整数。<br>题目保证最小生成树的总权重不会超过 2^30。</p>
<h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><ul>
<li>如果存在最小生成树: 第一行输出 <strong>总权重</strong>，第二行输出是否唯一<code>Yes</code> 或者 <code>No</code></li>
<li>如果树不存在，则首先在第一行输出<code>No MST</code>，第二行输出图的连通集个数。</li>
</ul>
<h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>我的想法是现在有一个权重为<code>k</code>的边可以链接集合<code>a</code>和<code>b</code><br>下面如果还有一个权重相同且能链接集合<code>a</code>和<code>b</code>的边，MST不唯一</p>
<p>由于要求出联通集个数，这边我用的是 uset 存祖先结点个数</p>
<h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">path</span>&#123; <span class="comment">// 将边的信息存为结构体</span></span><br><span class="line">    <span class="type">int</span> u;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa[<span class="number">507</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 找结点的祖先结点</span></span><br><span class="line">    <span class="keyword">if</span> (x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> path&amp; a, <span class="type">const</span> path&amp; b)</span> </span>&#123; <span class="comment">// 按权值升序排列所有边</span></span><br><span class="line">    <span class="keyword">return</span> a.weight &lt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>; <span class="comment">// flag 为 true 时，该最小生成树唯一</span></span><br><span class="line">    <span class="type">int</span> n,m;cin &gt;&gt; n &gt;&gt; m; <span class="comment">// n 为结点数，m 为边数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i; <span class="comment">// 初始化 fa 数组</span></span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;path&gt; <span class="title">arr</span><span class="params">(m)</span></span>; <span class="comment">// 用来存所有边的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读入边的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i].u &gt;&gt; arr[i].v &gt;&gt; arr[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    ranges::<span class="built_in">sort</span>(arr, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 最小生成树的花费</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> edg = arr[i];</span><br><span class="line">        <span class="type">int</span> u_fa = <span class="built_in">find</span>(edg.u);</span><br><span class="line">        <span class="type">int</span> v_fa = <span class="built_in">find</span>(edg.v);</span><br><span class="line">        <span class="keyword">if</span> (u_fa != v_fa) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;<span class="comment">// 如果目前生成树还是唯一的话</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i<span class="number">+1</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (edg.weight == arr[j].weight) &#123; <span class="comment">// 花费一样，联通的集合相同就是等价的两条边</span></span><br><span class="line">                        <span class="type">int</span> uu_fa = <span class="built_in">find</span>(arr[j].u);</span><br><span class="line">                        <span class="type">int</span> vv_fa = <span class="built_in">find</span>(arr[j].v);</span><br><span class="line">                        <span class="keyword">if</span> ((uu_fa == u_fa &amp;&amp; vv_fa == v_fa) || (uu_fa == v_fa &amp;&amp; vv_fa == u_fa)) flag = <span class="literal">false</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 权值不相等的边不会影响最小生成树的唯一性</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sum += edg.weight;</span><br><span class="line">            fa[u_fa] = v_fa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; st; <span class="comment">// 存祖先结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        st.<span class="built_in">insert</span>(<span class="built_in">find</span>(fa[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123; <span class="comment">// 祖先结点数大于 1 说明有多个联通集合</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No MST&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; st.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl; <span class="comment">// 最小生成树的花费</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法优化</category>
      </categories>
      <tags>
        <tag>PTA</tag>
        <tag>并查集</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>求先序排列</title>
    <url>/2025/03/03/%E6%B1%82%E5%85%88%E5%BA%8F%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<p>题目链接：<a href="https://ac.nowcoder.com/acm/contest/21763/P">https://ac.nowcoder.com/acm/contest/21763/P</a></p>
</blockquote>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一棵二叉树的中序与后序排列，求出它的先序排列</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote>
<p>前序遍历：根-左-右<br>中序遍历：左-根-右<br>后序遍历：左-右-根</p>
</blockquote>
<p>打印前序的递归算法：</p>
<ol>
<li>打印当前树的<code>root</code></li>
<li>进入左子树</li>
<li>进入右子树</li>
</ol>
<p>令<code>[l1, r1]</code>为当前递归到的子树的<strong>中序范围</strong><br>令<code>[l2, r2]</code>为当前递归到的子树的<strong>后序范围</strong><br>后序的最后一个值为当前子树的根，<code>char root = hou[r2]</code><br>找到中序排列中根的下标，并以找到左子树和右子树的长度 </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = l1; i &lt;= r1; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (zhong[i] == root) &#123;</span><br><span class="line">        pos = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>左子树的长度：<code>lenL = pos - 1 - l1 + 1</code><br>右子树的长度：<code>lenR = r1 - (pos + 1) + 1</code></p>
<p>左子树的中序范围：<code>[l1, pos-1]</code><br>左子树的后序范围：<code>[l2, l2+(lenL-1)]</code></p>
<p>右子树的中序范围：<code>[pos+1, r1]</code><br>右子树的后序范围：<code>[r2-1-(lenR-1), r2-1]</code></p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line">string zhong,hou;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> l1, <span class="type">int</span> r1, <span class="type">int</span> l2, <span class="type">int</span> r2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 &gt; r1) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">char</span> root = hou[r2];</span><br><span class="line">    cout &lt;&lt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标是找到根节点在中序排列的下标，以此找到左右子树的中序范围和长度</span></span><br><span class="line">    <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l1; i &lt;=r1; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (zhong[i] == root) &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我这里用的是长度计算下标，同样可以用解方程的形式计算边界</span></span><br><span class="line">    <span class="type">int</span> lenL = pos - <span class="number">1</span> - l1 + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> lenR = r1 - (pos + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">test</span>(l1, pos<span class="number">-1</span>, l2, l2+lenL<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">test</span>(pos<span class="number">+1</span>, r1, r2<span class="number">-1</span>-(lenR<span class="number">-1</span>), r2<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; zhong &gt;&gt; hou;</span><br><span class="line">    <span class="type">int</span> len = zhong.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">test</span>(<span class="number">0</span>, len<span class="number">-1</span>, <span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>如何求后序遍历呢</p>
]]></content>
      <categories>
        <category>算法入门班</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树模板一</title>
    <url>/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%B8%80/</url>
    <content><![CDATA[<blockquote>
<p>线段树更像是一种工具，用来维护区间各种信息</p>
</blockquote>
<h2 id="本文的目标"><a href="#本文的目标" class="headerlink" title="本文的目标"></a>本文的目标</h2><p>前缀和例题：<a href="https://ac.nowcoder.com/acm/problem/226282">https://ac.nowcoder.com/acm/problem/226282</a><br>线段树一：<a href="https://ac.nowcoder.com/acm/problem/226533">https://ac.nowcoder.com/acm/problem/226533</a></p>
<p>题一是一个很单纯的区间查询，我们可以用<code>res = sum[r] - sum[l - 1]</code>得到答案<br>题二相较题一，只多了一个修改的操作<br>可若仍使用前缀和思想来写，则需要对每次修改都更新一边前缀和，时间复杂度达到了<code>O(n^2)</code><br>这时就要引入 <strong>线段树</strong> 这一数据结构</p>
<hr>
<h2 id="线段树的概念"><a href="#线段树的概念" class="headerlink" title="线段树的概念"></a>线段树的概念</h2><p>顾名思义，线段树是一棵由线段组成的二叉树<br>不同于数据结构课上讲的二叉树，线段树采用了数组来存储数据<br>但是物理空间上的相对位置只提供了指针的计算方法<br>所以我个人是选择遗忘它数组的身份</p>
<hr>
<h2 id="线段树的代码实现"><a href="#线段树的代码实现" class="headerlink" title="线段树的代码实现"></a>线段树的代码实现</h2><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p><code>p</code>结点的左子树的指针是<code>2 * p</code> ，代表的区间范围是<code>[l, mid]</code><br><code>p</code>结点的右子树的指针是<code>2 * p + 1</code> ，代表的区间范围是<code>[mid + 1, r]</code></p>
<p>当且仅当<code>l == r</code>时，<code>p</code>结点为叶子结点（区间范围为 1），此时<code>sum</code>的值等于下标为<code>l</code>的元素的值<br>非叶子结点的值就等于左子树与右子树的sum之和，<code>tree[p] = tree[2*p] + tree[2*p+1]</code><br>根据这些写出建树的递归函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] = arr[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r);</span><br><span class="line"></span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改值"><a href="#改值" class="headerlink" title="改值"></a>改值</h3><p>具体操作分为三步</p>
<ol>
<li>找到需要修改的叶子结点</li>
<li>更改叶子结点</li>
<li>更新包含这个下标的所有线段</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r &amp;&amp; r==pos) &#123;</span><br><span class="line">        tree[p] += num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找目标结点</span></span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) &#123; <span class="comment">// 目标下标在左子树对应的区间里</span></span><br><span class="line">        <span class="built_in">change</span>(<span class="number">2</span>*p, l, mid, pos, num);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">// 目标下标在右子树对应的区间里</span></span><br><span class="line">        <span class="built_in">change</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, pos, num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新包含此下标的线段的 sum</span></span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>接下来就是查询<code>[x, y]</code>的区间和了<br>也很简单，首先要明晰一个概念，线段树中任意两个结点只有包含和毫不相关这两种关系<br>是不会存在重叠这种情况的</p>
<p>那么我只需将所有 <strong>完全包含于</strong><code>[x, y]</code>的区间的值相加即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l &amp;&amp; r&lt;=y) &#123; <span class="comment">// 结点对应的区间被 [x, y] 包含</span></span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123; <span class="comment">// 目标区间有部分在左子树里</span></span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p, l, mid, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重中之重不能写 else if ，目标区间横跨左右子树是存在的</span></span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>) &#123;</span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"><span class="type">int</span> n,m; <span class="comment">// n个结点，m次查询</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">1e5</span><span class="number">+1</span>)</span></span>; <span class="comment">// 存初始数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tree</span><span class="params">(<span class="number">4</span>*<span class="number">1e5</span><span class="number">+1</span>)</span></span>; <span class="comment">// 线段树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;<span class="comment">// 建树</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] = arr[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r);</span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> num)</span></span>&#123;<span class="comment">// 把 pos 的值改为 num</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] += num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">change</span> (<span class="number">2</span>*p, l, mid, pos, num);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, pos, num);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;<span class="comment">// 计算 [x, y] 的区间和</span></span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l &amp;&amp; r&lt;=y) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l+r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p, l, mid, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>)&#123;</span><br><span class="line">        res += <span class="built_in">calc</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> op;cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> pos,num;cin &gt;&gt; pos &gt;&gt; num;</span><br><span class="line">            <span class="built_in">change</span> (<span class="number">1</span>, <span class="number">1</span>, n, pos,num);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> left,right;cin &gt;&gt; left &gt;&gt; right;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">calc</span> (<span class="number">1</span>, <span class="number">1</span>, n, left, right) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="线段树的进阶"><a href="#线段树的进阶" class="headerlink" title="线段树的进阶"></a>线段树的进阶</h2><p>可以注意到线段树函数的参数都有<code>(int p, int l, int r)</code>这个参数列表<br>很自然想到可以用结构体来维护，这个煮包没实现<br>但是我已经在着手学习cpp的面向对象，打算把线段树封装成class方便快速AC板子题，希望在写完这个专题前能学完</p>
<blockquote>
<p>本文实现了单点修改，区间查找的线段树模板<br>最后请耐心看到这里的同学思考一下如何实现区间修改</p>
</blockquote>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树模板三</title>
    <url>/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%B8%89/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>牛客</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树模板二</title>
    <url>/2025/02/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="本文的目标-AC真正的线段树模板一"><a href="#本文的目标-AC真正的线段树模板一" class="headerlink" title="本文的目标 -AC真正的线段树模板一"></a>本文的目标 -AC真正的线段树模板一</h2><p>题目链接：</p>
<ul>
<li>牛客：<a href="https://ac.nowcoder.com/acm/problem/226536">https://ac.nowcoder.com/acm/problem/226536</a></li>
<li>洛谷：<a href="https://www.luogu.com.cn/problem/P3372">https://www.luogu.com.cn/problem/P3372</a></li>
</ul>
<p>太好了，AC 一道题可以让自己的总题量<code>+=2</code></p>
<p>一定有人和我一样，刚学完单点修改用循环<code>change()</code>交了一发区间修改惨遭 TLE<br>仔细算一下复杂度甚至超过了暴力加</p>
<p>这时候就要引入<code>lazy</code>标记，这是单点修改不需要的</p>
<h2 id="lazy-标记是什么"><a href="#lazy-标记是什么" class="headerlink" title="lazy 标记是什么"></a>lazy 标记是什么</h2><p>举个例子：<br>班级四个人，每人交了 100 元的班费<br>财务不用在每个人的账上分别记录，只需要写下<code>[1, 4]</code>这个范围<code>+100</code>即可<br>这个标记我们称之为<code>lazy 标记</code></p>
<h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>无论维护什么信息的线段树建树的递归逻辑都是一致的<br>只需要注意父子线段之间的关系<br>比如维护区间和：<code>tree[p] = tree[2*p] + tree[2*p+1];</code><br>维护区间最大值：<code>tree[p] = max(tree[2*p], tree[2*p+1])</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123; <span class="comment">// 找到叶子结点</span></span><br><span class="line">        tree[p] = arr[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (l + r) /<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 递归左右子树</span></span><br><span class="line">    <span class="built_in">build</span> (<span class="number">2</span>*p, l, mid,);</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r);</span><br><span class="line">    <span class="comment">// 这行表示父子线段的关系</span></span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="pushdown函数的实现"><a href="#pushdown函数的实现" class="headerlink" title="pushdown函数的实现"></a>pushdown函数的实现</h3><p>由于lazy标记的存在，父亲结点的更改并没有及时的告诉子节点<br>但是我们希望在访问到一个线段的时候，它维护的信息是正确的<br>这时候就需要用<code>pushdown()</code>来将lazy标记向下传递</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    lazy[<span class="number">2</span>*p] = lazy[p];</span><br><span class="line">    lazy[<span class="number">2</span>*p<span class="number">+1</span>] = lazy[p];</span><br><span class="line">    tree[<span class="number">2</span>*p] += lazy[p] * (mid - l + <span class="number">1</span>);</span><br><span class="line">    tree[<span class="number">2</span>*p<span class="number">+1</span>] += lazy[p] * (r - (mid + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    lazy[p] = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>lazy[p] != 0</code> 代表有该结点有操作是子结点还不知道的，此时才需要将<code>lazy</code>标记<code>pushdown()</code></p>
<h3 id="change-函数的实现"><a href="#change-函数的实现" class="headerlink" title="change()函数的实现"></a>change()函数的实现</h3><p>区间修改的主要逻辑和模板一的区间查询相同<br>修改完全被<code>[x, y]</code>线段包含的区间的 <strong>lazy标记</strong> 和 <strong>线段信息</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= l &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">        lazy[p] += num;</span><br><span class="line">        tree[p] = num * (r - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lazy 标记不为 0，代表该结点有操作是左右子节点不知道的</span></span><br><span class="line">    <span class="comment">// 在访问两个子树前要先将 lazy 标记向下传</span></span><br><span class="line">    <span class="keyword">if</span> (lazy[p] != <span class="number">0</span>) <span class="built_in">pushdown</span>(p, l, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">change</span>(p, l ,mid, x, y, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重中之重不能写 else if</span></span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>) &#123;</span><br><span class="line">        <span class="built_in">change</span>(p, mid<span class="number">+1</span>, r, x, y, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 代表区间维护的信息</span></span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="calc-函数的实现"><a href="#calc-函数的实现" class="headerlink" title="calc()函数的实现"></a>calc()函数的实现</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lazy[p] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(p, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        ans += <span class="built_in">calc</span>(<span class="number">2</span>*p, l, mid, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>) &#123;</span><br><span class="line">        ans += <span class="built_in">calc</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LNF 1e18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) llabs(x)</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> tree[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> lazy[<span class="number">400001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[p] = arr[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">2</span>*p, l, mid);</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r);</span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] + tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    lazy[<span class="number">2</span>*p] += lazy[p];</span><br><span class="line">    lazy[<span class="number">2</span>*p<span class="number">+1</span>] += lazy[p];</span><br><span class="line">    tree[<span class="number">2</span>*p] += (mid - l <span class="number">+1</span>) * lazy[p];</span><br><span class="line">    tree[<span class="number">2</span>*p<span class="number">+1</span>] += (r - (mid<span class="number">+1</span>) <span class="number">+1</span>) * lazy[p];</span><br><span class="line">    lazy[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l &amp;&amp; r&lt;=y) &#123;</span><br><span class="line">        tree[p] += num * (r-l<span class="number">+1</span>);</span><br><span class="line">        lazy[p] += num;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lazy[p] != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(p, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">change</span> (<span class="number">2</span>*p, l, mid, x, y, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>) &#123;</span><br><span class="line">        <span class="built_in">change</span> (<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y, num);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[p] = tree[<span class="number">2</span>*p] +tree[<span class="number">2</span>*p<span class="number">+1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span> <span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=l &amp;&amp; r&lt;=y) &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lazy[p] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">pushdown</span> (p, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) res += <span class="built_in">calc</span>(<span class="number">2</span>*p, l, mid, x, y);</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mid<span class="number">+1</span>) res += <span class="built_in">calc</span>(<span class="number">2</span>*p<span class="number">+1</span>, mid<span class="number">+1</span>, r, x, y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,q;cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> op;cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x, y, num;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; num;</span><br><span class="line">            <span class="built_in">change</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y, num);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x, y;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">calc</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T=<span class="number">1</span>;<span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>牛客</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
</search>
